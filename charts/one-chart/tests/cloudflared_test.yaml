# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Cloudflared template tests
templates:
  - ../templates/cloudflared.yaml
release:
  name: test-release
  namespace: test-namespace

tests:
  - it: should not render cloudflared resources when cloudflared.enabled is false
    set:
      cloudflared:
        enabled: false
    asserts:
      - hasDocuments: 
          count: 0

  - it: should render cloudflared Deployment, ConfigMap and OnePasswordItem when cloudflared.enabled is true
    set:
      cloudflared:
        enabled: true
        tunnel:
          name: my-tunnel
          publicHostname: myapp.example.com
          localHostname: myapp-service:80
        onepassword:
          vault: MyVault
          item: MyCloudflaredItem
    asserts:
      - hasDocuments:
          count: 3
      - isKind:
          of: Deployment
        documentIndex: 0
      - isKind:
          of: ConfigMap
        documentIndex: 1
      - isKind:
          of: OnePasswordItem
        documentIndex: 2

  - it: should render the cloudflared Deployment with correct name and labels
    set:
      cloudflared:
        enabled: true
        tunnel:
          name: my-tunnel
          publicHostname: myapp.example.com
          localHostname: myapp-service:80
    asserts:
      - isKind:
          of: Deployment
        documentIndex: 0
      - equal:
          path: metadata.name
          value: cloudflared-test-release-one-chart
        documentIndex: 0
      - matchRegex:
          path: metadata.labels["helm.sh/chart"]
          pattern: ^one-chart-[0-9]+\.[0-9]+\.[0-9]+$
        documentIndex: 0

  - it: should render the cloudflared ConfigMap with correct name and data
    set:
      cloudflared:
        enabled: true
        tunnel:
          name: my-tunnel
          publicHostname: myapp.example.com
          localHostname: myapp-service:80
    asserts:
      - isKind:
          of: ConfigMap
        documentIndex: 1
      - equal:
          path: metadata.name
          value: cloudflared-test-release-one-chart
        documentIndex: 1
      - equal:
          path: data["config.yaml"]
          value: |
            tunnel: my-tunnel

            metrics: 0.0.0.0:2000

            no-autoupdate: true
            ingress:
            - hostname: myapp.example.com
              service: myapp-service:80
            - service: http_status:404
        documentIndex: 1

  - it: should render the cloudflared OnePasswordItem with correct name and itemPath
    set:
      cloudflared:
        enabled: true
        tunnel:
          name: my-tunnel
          publicHostname: myapp.example.com
          localHostname: myapp-service:80
        onepassword:
          vault: MyVault
          item: MyCloudflaredItem
    asserts:
      - isKind:
          of: OnePasswordItem
        documentIndex: 2
      - equal:
          path: metadata.name
          value: cloudflared-test-release-one-chart
        documentIndex: 2
      - equal:
          path: spec.itemPath
          value: "vaults/MyVault/items/MyCloudflaredItem"
        documentIndex: 2

  - it: should set cloudflared image and pull policy
    set:
      cloudflared:
        enabled: true
        image:
          repository: my-custom-cloudflared
          tag: latest
        tunnel:
          name: my-tunnel
          publicHostname: myapp.example.com
          localHostname: myapp-service:80
    asserts:
      - isKind:
          of: Deployment
        documentIndex: 0
      - equal:
          path: spec.template.spec.containers[0].image
          value: "my-custom-cloudflared:latest"
        documentIndex: 0

  - it: should set cloudflared pod annotations
    set:
      cloudflared:
        enabled: true
        podAnnotations:
          my-annotation: my-value
        tunnel:
          name: my-tunnel
          publicHostname: myapp.example.com
          localHostname: myapp-service:80
    asserts:
      - isKind:
          of: Deployment
        documentIndex: 0
      - equal:
          path: spec.template.metadata.annotations["my-annotation"]
          value: my-value
        documentIndex: 0

  - it: should set cloudflared pod labels
    set:
      cloudflared:
        enabled: true
        podLabels:
          my-label: my-value
        tunnel:
          name: my-tunnel
          publicHostname: myapp.example.com
          localHostname: myapp-service:80
    asserts:
      - isKind:
          of: Deployment
        documentIndex: 0
      - equal:
          path: spec.template.metadata.labels["my-label"]
          value: my-value
        documentIndex: 0

  - it: should set the cloudflared replica count
    set:
      cloudflared:
        enabled: true
        replicaCount: 3
        tunnel:
          name: my-tunnel
          publicHostname: myapp.example.com
          localHostname: myapp-service:80
    asserts:
      - isKind:
          of: Deployment
        documentIndex: 0
      - equal:
          path: spec.replicas
          value: 3
        documentIndex: 0

  - it: should render pod a affinity and anti-affinity rule with the correct topology key
    set:
      cloudflared:
        enabled: true
      homelab:
        category: "networking"
        realm: "middle-earth"
    asserts:
      - isKind:
          of: Deployment
        documentIndex: 0
      - equal:
          path: spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].podAffinityTerm.topologyKey
          value: kubernetes.io/hostname
        documentIndex: 0
      - equal:
          path: spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].podAffinityTerm.topologyKey
          value: kubernetes.io/hostname
        documentIndex: 0

  - it: should render pod affinity with correct label selector
    set:
      cloudflared:
        enabled: true
      homelab:
        category: "networking"
        realm: "middle-earth"
    asserts:
      - isKind:
          of: Deployment
        documentIndex: 0
      - equal:
          path: spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].podAffinityTerm.labelSelector.matchLabels
          value:
            app.kubernetes.io/instance: test-release
            app.kubernetes.io/name: one-chart
            middle-earth-cluster.homelab/category: networking
            middle-earth-cluster.homelab/realm: middle-earth
        documentIndex: 0

  - it: should render pod anti-affinity with correct label selector
    set:
      cloudflared:
        enabled: true
      homelab:
        category: "networking"
        realm: "middle-earth"
    asserts:
      - isKind:
          of: Deployment
        documentIndex: 0
      - equal:
          path: spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].podAffinityTerm.labelSelector.matchLabels
          value:
            app.kubernetes.io/instance: test-release
            app.kubernetes.io/component: cloudflared
        documentIndex: 0

  - it: should render prometheus annotations when cloudflared.prometheus.enabled is true
    set:
      cloudflared:
        enabled: true
        prometheus:
          enabled: true
          port: 2000
          path: /metrics
          interval: 30s
          scrapeTimeout: 10s
    asserts:
      - isKind:
          of: Deployment
        documentIndex: 0
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/scrape"]
          value: "true"
        documentIndex: 0
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/port"]
          value: "2000"
        documentIndex: 0
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/path"]
          value: "/metrics"
        documentIndex: 0
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/interval"]
          value: "30s"
        documentIndex: 0
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/scrape_timeout"]
          value: "10s"
        documentIndex: 0

  - it: should not render prometheus annotations when cloudflared.prometheus.enabled is false
    set:
      cloudflared:
        enabled: true
        prometheus:
          enabled: false
    asserts:
      - isKind:
          of: Deployment
        documentIndex: 0
      - notExists:
          path: spec.template.metadata.annotations["prometheus.io/scrape"]
        documentIndex: 0
      - notExists:
          path: spec.template.metadata.annotations["prometheus.io/port"]
        documentIndex: 0
      - notExists:
          path: spec.template.metadata.annotations["prometheus.io/path"]
        documentIndex: 0
      - notExists:
          path: spec.template.metadata.annotations["prometheus.io/interval"]
        documentIndex: 0
      - notExists:
          path: spec.template.metadata.annotations["prometheus.io/scrape_timeout"]
        documentIndex: 0

  - it: should have a recreate deployment strategy by default
    set:
      cloudflared:
        enabled: true
    asserts:
      - isKind:
          of: Deployment
        documentIndex: 0
      - equal:
          path: spec.strategy.type
          value: Recreate
        documentIndex: 0

  - it: should have a rolling update deployment strategy
    set:
      cloudflared:
        enabled: true
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxUnavailable: 50%
    asserts:
      - isKind:
          of: Deployment
        documentIndex: 0
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
        documentIndex: 0
      - equal:
          path: spec.strategy.rollingUpdate.maxUnavailable
          value: 50%
        documentIndex: 0
