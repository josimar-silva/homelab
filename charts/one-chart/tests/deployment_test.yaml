# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Deployment template tests
templates:
  - ../templates/deployment.yaml
release:
  name: test-release
  namespace: TEST_NAMESPACE


tests:
  - it: should render a Deployment with correct name
    set:
      image.tag: "1.16.0"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: test-release-one-chart

  - it: should render a Deployment with default labels
    set:
      homelab:
        category: microservices
        realm: playground
      image.tag: "1.16.0"
    asserts:
      - isKind:
          of: Deployment
      - matchRegex:
          path: metadata.labels["helm.sh/chart"]
          pattern: ^one-chart-[0-9]+\.[0-9]+\.[0-9]+$
      - equal:
          path: metadata.labels["app.kubernetes.io/version"]
          value: "1.16.0"
      - equal:
          path: metadata.labels["app.kubernetes.io/managed-by"]
          value: "Helm"
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: "one-chart"
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: "test-release"
      - equal:
          path: metadata.labels["middle-earth-cluster.homelab/category"]
          value: "microservices"
      - equal:
          path: metadata.labels["middle-earth-cluster.homelab/realm"]
          value: "playground"


  - it: should set the replica count from values.yaml
    set:
      replicaCount: 2
      image.tag: "1.16.0"
    asserts:
      - equal:
          path: spec.replicas
          value: 2

  - it: should set the container image and pull policy
    set:
      image.tag: "1.16.0"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: "nginx:1.16.0"
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: "IfNotPresent"

  - it: should expose the correct container port
    asserts:
      - equal:
          path: spec.template.spec.containers[0].ports[0].containerPort
          value: 80
      - equal:
          path: spec.template.spec.containers[0].ports[0].name
          value: http
  
  - it: should render a Deployment with multiple container ports when service.ports is set
    set:
      service:
        ports:
          - name: http
            port: 80
            containerPort: 8080
          - name: admin
            port: 8081
            containerPort: 9090
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].ports[0].name
          value: http
      - equal:
          path: spec.template.spec.containers[0].ports[0].containerPort
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].ports[1].name
          value: admin
      - equal:
          path: spec.template.spec.containers[0].ports[1].containerPort
          value: 9090

  - it: should fall back to service.port when service.ports is empty
    set:
      service:
        port: 1234
        ports: []
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].ports[0].containerPort
          value: 1234
      - equal:
          path: spec.template.spec.containers[0].ports[0].name
          value: http
      - lengthEqual:
          path: spec.template.spec.containers[0].ports
          count: 1

  - it: should set the security context for the container
    set:
      securityContext:
        runAsUser: 1000
        runAsNonRoot: true
    asserts:
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 1000
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: true

  - it: should render custom volumes when .Values.volumes is set
    set:
      image.tag: "1.16.0"
      volumes:
        - name: custom-volume
          emptyDir: {}
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.volumes
          content:
            name: custom-volume
            emptyDir: {}

  - it: should render only PVC volume when .Values.volumes is not set and persistentVolume.enabled is true
    set:
      image.tag: "1.16.0"
      persistentVolume:
        enabled: true
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.volumes
          content:
            name: test-release-one-chart
            persistentVolumeClaim:
              claimName: test-release-one-chart

  - it: should render both custom volumes and PVC when both are set
    set:
      image.tag: "1.16.0"
      volumes:
        - name: custom-volume
          emptyDir: {}
      persistentVolume:
        enabled: true
        mountPath: /myData
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.volumes
          content:
            name: custom-volume
            emptyDir: {}
      - contains:
          path: spec.template.spec.volumes
          content:
            name: test-release-one-chart
            persistentVolumeClaim:
              claimName: test-release-one-chart

  - it: should render custom volumeMounts when .Values.volumeMounts is set
    set:
      image.tag: "1.16.0"
      volumeMounts:
        - name: custom-volume
          mountPath: /custom
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: custom-volume
            mountPath: /custom

  - it: should render both custom volumeMounts and PVC mount when both are set
    set:
      image.tag: "1.16.0"
      volumeMounts:
        - name: custom-volume
          mountPath: /custom
      persistentVolume:
        enabled: true
        mountPath: /myData
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: custom-volume
            mountPath: /custom
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: test-release-one-chart
            mountPath: /myData

  - it: should render only PVC volumeMount when .Values.volumeMounts is not set and persistentVolume.enabled is true
    set:
      image.tag: "1.16.0"
      persistentVolume:
        enabled: true
        mountPath: /data
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: test-release-one-chart
            mountPath: /data

  - it: should render env when environmentVariables.container.enabled is true
    set:
      image.tag: "1.16.0"
      environmentVariables:
        container:
          enabled: true
          variables:
            - name: FOO
              value: bar
            - name: BAR
              value: baz
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: FOO
            value: bar
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: BAR
            value: baz

  - it: should render envFrom with only secretRefs when only fromSecret.enabled is true
    set:
      image.tag: "1.16.0"
      environmentVariables:
        fromSecret:
          enabled: true
          secrets:
            - my-secret
            - another-secret
        fromConfigMap:
          enabled: false
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: my-secret
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: another-secret

  - it: should render envFrom with only configMapRefs when only fromConfigMap.enabled is true
    set:
      image.tag: "1.16.0"
      environmentVariables:
        fromSecret:
          enabled: false
        fromConfigMap:
          enabled: true
          configMaps:
            - my-configmap
            - another-configmap
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            configMapRef:
              name: my-configmap
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            configMapRef:
              name: another-configmap

  - it: should render envFrom with both secretRefs and configMapRefs when both are enabled
    set:
      image.tag: "1.16.0"
      environmentVariables:
        fromSecret:
          enabled: true
          secrets:
            - my-secret
        fromConfigMap:
          enabled: true
          configMaps:
            - my-configmap
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: my-secret
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            configMapRef:
              name: my-configmap

  - it: should not render envFrom when neither fromSecret.enabled nor fromConfigMap.enabled is true
    set:
      image.tag: "1.16.0"
      environmentVariables:
        fromSecret:
          enabled: false
        fromConfigMap:
          enabled: false
    asserts:
      - isKind:
          of: Deployment
      - notExists:
          path: spec.template.spec.containers[0].envFrom

  - it: should render both env and envFrom when both container.enabled and fromSecret/fromConfigMap.enabled are true
    set:
      image.tag: "1.16.0"
      environmentVariables:
        container:
          enabled: true
          variables:
            - name: FOO
              value: bar
        fromSecret:
          enabled: true
          secrets:
            - my-secret
        fromConfigMap:
          enabled: true
          configMaps:
            - my-configmap
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: FOO
            value: bar
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: my-secret
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            configMapRef:
              name: my-configmap

  - it: should render DNS configuration when dns.enabled is true
    set:
      dns:
        enabled: true
        policy: "ClusterFirst"
        config:
          nameservers:
            - "8.8.8.8"
            - "8.8.4.4"
          searches:
            - "default.svc.cluster.local"
          options:
            - name: "ndots"
              value: "5"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.dnsPolicy
          value: "ClusterFirst"
      - contains:
          path: spec.template.spec.dnsConfig.nameservers
          content: "8.8.8.8"
      - contains:
          path: spec.template.spec.dnsConfig.nameservers
          content: "8.8.4.4"
      - contains:
          path: spec.template.spec.dnsConfig.searches
          content: "default.svc.cluster.local"
      - contains:
          path: spec.template.spec.dnsConfig.options
          content:
            name: "ndots"
            value: "5"

  - it: should not render DNS configuration when dns.enabled is false
    set:
      dns:
        enabled: false
    asserts:
      - isKind:
          of: Deployment
      - notExists:
          path: spec.template.spec.dnsPolicy
      - notExists:
          path: spec.template.spec.dnsConfig

  - it: should set the container name to the release name
    set:
      image.tag: "1.16.0"
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[0].name
          value: test-release

  - it: should render extra containers when extraContainers is set
    set:
      extraContainers:
        - name: logwatcher
          image: some-registry/logwatcher
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 5Mi
            limits:
              cpu: 100m
              memory: 5Mi
          volumeMounts:
          - name: logs
            mountPath: /var/log/mylogs
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.containers
          content:
            name: logwatcher
            image: some-registry/logwatcher
            imagePullPolicy: Always
            resources:
              requests:
                cpu: 100m
                memory: 5Mi
              limits:
                cpu: 100m
                memory: 5Mi
            volumeMounts:
            - name: logs
              mountPath: /var/log/mylogs

  - it: should render imagePullSecrets when set
    set:
      image.tag: "1.16.0"
      imagePullSecrets:
        - name: my-secret
        - name: another-secret
    asserts:
      - isKind:
          of: Deployment
      - contains:
          path: spec.template.spec.imagePullSecrets
          content:
            name: my-secret
      - contains:
          path: spec.template.spec.imagePullSecrets
          content:
            name: another-secret

  - it: should render prometheus annotations when prometheus.enabled is true
    set:
      prometheus:
        enabled: true
        port: 9090
        path: /metrics-custom
        interval: 15s
        scrapeTimeout: 5s
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/scrape"]
          value: "true"
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/port"]
          value: "9090"
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/path"]
          value: "/metrics-custom"
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/interval"]
          value: "15s"
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/scrape_timeout"]
          value: "5s"

  - it: should not render prometheus annotations when prometheus.enabled is false
    set:
      prometheus:
        enabled: false
    asserts:
      - isKind:
          of: Deployment
      - notExists:
          path: spec.template.metadata.annotations["prometheus.io/scrape"]
      - notExists:
          path: spec.template.metadata.annotations["prometheus.io/port"]
      - notExists:
          path: spec.template.metadata.annotations["prometheus.io/path"]
      - notExists:
          path: spec.template.metadata.annotations["prometheus.io/interval"]
      - notExists:
          path: spec.template.metadata.annotations["prometheus.io/scrape_timeout"]
